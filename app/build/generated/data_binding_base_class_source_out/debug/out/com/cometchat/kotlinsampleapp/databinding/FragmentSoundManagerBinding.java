// Generated by view binder compiler. Do not edit!
package com.cometchat.kotlinsampleapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cometchat.kotlinsampleapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSoundManagerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView incomingMessageText;

  @NonNull
  public final TextView outgoingMessageText;

  @NonNull
  public final LinearLayout parentView;

  @NonNull
  public final AppCompatButton playIncoming;

  @NonNull
  public final AppCompatButton playOutgoing;

  @NonNull
  public final TextView soundManagerDescription;

  @NonNull
  public final TextView soundManagerTitle;

  private FragmentSoundManagerBinding(@NonNull LinearLayout rootView,
      @NonNull TextView incomingMessageText, @NonNull TextView outgoingMessageText,
      @NonNull LinearLayout parentView, @NonNull AppCompatButton playIncoming,
      @NonNull AppCompatButton playOutgoing, @NonNull TextView soundManagerDescription,
      @NonNull TextView soundManagerTitle) {
    this.rootView = rootView;
    this.incomingMessageText = incomingMessageText;
    this.outgoingMessageText = outgoingMessageText;
    this.parentView = parentView;
    this.playIncoming = playIncoming;
    this.playOutgoing = playOutgoing;
    this.soundManagerDescription = soundManagerDescription;
    this.soundManagerTitle = soundManagerTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSoundManagerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSoundManagerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_sound_manager, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSoundManagerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.incoming_message_text;
      TextView incomingMessageText = ViewBindings.findChildViewById(rootView, id);
      if (incomingMessageText == null) {
        break missingId;
      }

      id = R.id.outgoing_message_text;
      TextView outgoingMessageText = ViewBindings.findChildViewById(rootView, id);
      if (outgoingMessageText == null) {
        break missingId;
      }

      LinearLayout parentView = (LinearLayout) rootView;

      id = R.id.playIncoming;
      AppCompatButton playIncoming = ViewBindings.findChildViewById(rootView, id);
      if (playIncoming == null) {
        break missingId;
      }

      id = R.id.playOutgoing;
      AppCompatButton playOutgoing = ViewBindings.findChildViewById(rootView, id);
      if (playOutgoing == null) {
        break missingId;
      }

      id = R.id.soundManager_description;
      TextView soundManagerDescription = ViewBindings.findChildViewById(rootView, id);
      if (soundManagerDescription == null) {
        break missingId;
      }

      id = R.id.soundManager_title;
      TextView soundManagerTitle = ViewBindings.findChildViewById(rootView, id);
      if (soundManagerTitle == null) {
        break missingId;
      }

      return new FragmentSoundManagerBinding((LinearLayout) rootView, incomingMessageText,
          outgoingMessageText, parentView, playIncoming, playOutgoing, soundManagerDescription,
          soundManagerTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
