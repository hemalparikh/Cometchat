// Generated by view binder compiler. Do not edit!
package com.cometchat.kotlinsampleapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cometchat.kotlinsampleapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityComponentListBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout addMember;

  @NonNull
  public final LinearLayout audioBubble;

  @NonNull
  public final LinearLayout avatar;

  @NonNull
  public final ImageView backIcon;

  @NonNull
  public final LinearLayout badgeCount;

  @NonNull
  public final LinearLayout bannedMembers;

  @NonNull
  public final LinearLayout callButton;

  @NonNull
  public final LinearLayout callLogHistory;

  @NonNull
  public final LinearLayout callLogParticipants;

  @NonNull
  public final LinearLayout callLogRecording;

  @NonNull
  public final LinearLayout callLogs;

  @NonNull
  public final LinearLayout callLogsDetails;

  @NonNull
  public final LinearLayout callLogsWithDetails;

  @NonNull
  public final LinearLayout cardBubble;

  @NonNull
  public final LinearLayout contacts;

  @NonNull
  public final LinearLayout conversationWithMessages;

  @NonNull
  public final LinearLayout conversations;

  @NonNull
  public final LinearLayout createGroup;

  @NonNull
  public final LinearLayout filesBubble;

  @NonNull
  public final LinearLayout formBubble;

  @NonNull
  public final LinearLayout groupDetails;

  @NonNull
  public final LinearLayout groupMember;

  @NonNull
  public final LinearLayout groupWithMessages;

  @NonNull
  public final LinearLayout groups;

  @NonNull
  public final ImageView imageAd;

  @NonNull
  public final ImageView imageAudio;

  @NonNull
  public final ImageView imageAudioBubble;

  @NonNull
  public final ImageView imageAvatar;

  @NonNull
  public final ImageView imageBadgeCount;

  @NonNull
  public final ImageView imageBm;

  @NonNull
  public final LinearLayout imageBubble;

  @NonNull
  public final ImageView imageC;

  @NonNull
  public final ImageView imageCallButton;

  @NonNull
  public final ImageView imageCallLogHistory;

  @NonNull
  public final ImageView imageCallLogParticipant;

  @NonNull
  public final ImageView imageCallLogRecording;

  @NonNull
  public final ImageView imageCallLogs;

  @NonNull
  public final ImageView imageCallLogsDetails;

  @NonNull
  public final ImageView imageCallLogsWithDetails;

  @NonNull
  public final ImageView imageCardBubble;

  @NonNull
  public final ImageView imageCg;

  @NonNull
  public final ImageView imageContacts;

  @NonNull
  public final ImageView imageCwm;

  @NonNull
  public final ImageView imageFileBubble;

  @NonNull
  public final ImageView imageFormBubble;

  @NonNull
  public final ImageView imageG;

  @NonNull
  public final ImageView imageGd;

  @NonNull
  public final ImageView imageGm;

  @NonNull
  public final ImageView imageGwm;

  @NonNull
  public final ImageView imageImageBubble;

  @NonNull
  public final ImageView imageJp;

  @NonNull
  public final ImageView imageListItem;

  @NonNull
  public final ImageView imageMessage;

  @NonNull
  public final ImageView imageMessageComposer;

  @NonNull
  public final ImageView imageMessageHeader;

  @NonNull
  public final ImageView imageMessageInformation;

  @NonNull
  public final ImageView imageMessageList;

  @NonNull
  public final ImageView imageMessageReceipt;

  @NonNull
  public final ImageView imageMic;

  @NonNull
  public final ImageView imageSchedulerBubble;

  @NonNull
  public final ImageView imageStatusIndicator;

  @NonNull
  public final ImageView imageTextBubble;

  @NonNull
  public final ImageView imageTo;

  @NonNull
  public final ImageView imageTranslate;

  @NonNull
  public final ImageView imageU;

  @NonNull
  public final ImageView imageUd;

  @NonNull
  public final ImageView imageUwm;

  @NonNull
  public final ImageView imageVideoBubble;

  @NonNull
  public final LinearLayout joinProtectedGroup;

  @NonNull
  public final LinearLayout listItem;

  @NonNull
  public final LinearLayout localize;

  @NonNull
  public final LinearLayout mediaRecorder;

  @NonNull
  public final LinearLayout messageComposer;

  @NonNull
  public final LinearLayout messageHeader;

  @NonNull
  public final LinearLayout messageInformation;

  @NonNull
  public final LinearLayout messageList;

  @NonNull
  public final LinearLayout messageReceipt;

  @NonNull
  public final LinearLayout messages;

  @NonNull
  public final LinearLayout moduleCalls;

  @NonNull
  public final LinearLayout moduleChats;

  @NonNull
  public final LinearLayout moduleMessages;

  @NonNull
  public final LinearLayout moduleUsers;

  @NonNull
  public final LinearLayout noduleGroups;

  @NonNull
  public final LinearLayout parentView;

  @NonNull
  public final LinearLayout schedulerBubble;

  @NonNull
  public final LinearLayout shared;

  @NonNull
  public final LinearLayout soundManager;

  @NonNull
  public final LinearLayout statusIndicator;

  @NonNull
  public final LinearLayout textBubble;

  @NonNull
  public final LinearLayout theme;

  @NonNull
  public final TextView title;

  @NonNull
  public final LinearLayout transferOwnership;

  @NonNull
  public final LinearLayout userDetails;

  @NonNull
  public final LinearLayout userWithMessages;

  @NonNull
  public final LinearLayout users;

  @NonNull
  public final LinearLayout videoBubble;

  private ActivityComponentListBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout addMember, @NonNull LinearLayout audioBubble,
      @NonNull LinearLayout avatar, @NonNull ImageView backIcon, @NonNull LinearLayout badgeCount,
      @NonNull LinearLayout bannedMembers, @NonNull LinearLayout callButton,
      @NonNull LinearLayout callLogHistory, @NonNull LinearLayout callLogParticipants,
      @NonNull LinearLayout callLogRecording, @NonNull LinearLayout callLogs,
      @NonNull LinearLayout callLogsDetails, @NonNull LinearLayout callLogsWithDetails,
      @NonNull LinearLayout cardBubble, @NonNull LinearLayout contacts,
      @NonNull LinearLayout conversationWithMessages, @NonNull LinearLayout conversations,
      @NonNull LinearLayout createGroup, @NonNull LinearLayout filesBubble,
      @NonNull LinearLayout formBubble, @NonNull LinearLayout groupDetails,
      @NonNull LinearLayout groupMember, @NonNull LinearLayout groupWithMessages,
      @NonNull LinearLayout groups, @NonNull ImageView imageAd, @NonNull ImageView imageAudio,
      @NonNull ImageView imageAudioBubble, @NonNull ImageView imageAvatar,
      @NonNull ImageView imageBadgeCount, @NonNull ImageView imageBm,
      @NonNull LinearLayout imageBubble, @NonNull ImageView imageC,
      @NonNull ImageView imageCallButton, @NonNull ImageView imageCallLogHistory,
      @NonNull ImageView imageCallLogParticipant, @NonNull ImageView imageCallLogRecording,
      @NonNull ImageView imageCallLogs, @NonNull ImageView imageCallLogsDetails,
      @NonNull ImageView imageCallLogsWithDetails, @NonNull ImageView imageCardBubble,
      @NonNull ImageView imageCg, @NonNull ImageView imageContacts, @NonNull ImageView imageCwm,
      @NonNull ImageView imageFileBubble, @NonNull ImageView imageFormBubble,
      @NonNull ImageView imageG, @NonNull ImageView imageGd, @NonNull ImageView imageGm,
      @NonNull ImageView imageGwm, @NonNull ImageView imageImageBubble, @NonNull ImageView imageJp,
      @NonNull ImageView imageListItem, @NonNull ImageView imageMessage,
      @NonNull ImageView imageMessageComposer, @NonNull ImageView imageMessageHeader,
      @NonNull ImageView imageMessageInformation, @NonNull ImageView imageMessageList,
      @NonNull ImageView imageMessageReceipt, @NonNull ImageView imageMic,
      @NonNull ImageView imageSchedulerBubble, @NonNull ImageView imageStatusIndicator,
      @NonNull ImageView imageTextBubble, @NonNull ImageView imageTo,
      @NonNull ImageView imageTranslate, @NonNull ImageView imageU, @NonNull ImageView imageUd,
      @NonNull ImageView imageUwm, @NonNull ImageView imageVideoBubble,
      @NonNull LinearLayout joinProtectedGroup, @NonNull LinearLayout listItem,
      @NonNull LinearLayout localize, @NonNull LinearLayout mediaRecorder,
      @NonNull LinearLayout messageComposer, @NonNull LinearLayout messageHeader,
      @NonNull LinearLayout messageInformation, @NonNull LinearLayout messageList,
      @NonNull LinearLayout messageReceipt, @NonNull LinearLayout messages,
      @NonNull LinearLayout moduleCalls, @NonNull LinearLayout moduleChats,
      @NonNull LinearLayout moduleMessages, @NonNull LinearLayout moduleUsers,
      @NonNull LinearLayout noduleGroups, @NonNull LinearLayout parentView,
      @NonNull LinearLayout schedulerBubble, @NonNull LinearLayout shared,
      @NonNull LinearLayout soundManager, @NonNull LinearLayout statusIndicator,
      @NonNull LinearLayout textBubble, @NonNull LinearLayout theme, @NonNull TextView title,
      @NonNull LinearLayout transferOwnership, @NonNull LinearLayout userDetails,
      @NonNull LinearLayout userWithMessages, @NonNull LinearLayout users,
      @NonNull LinearLayout videoBubble) {
    this.rootView = rootView;
    this.addMember = addMember;
    this.audioBubble = audioBubble;
    this.avatar = avatar;
    this.backIcon = backIcon;
    this.badgeCount = badgeCount;
    this.bannedMembers = bannedMembers;
    this.callButton = callButton;
    this.callLogHistory = callLogHistory;
    this.callLogParticipants = callLogParticipants;
    this.callLogRecording = callLogRecording;
    this.callLogs = callLogs;
    this.callLogsDetails = callLogsDetails;
    this.callLogsWithDetails = callLogsWithDetails;
    this.cardBubble = cardBubble;
    this.contacts = contacts;
    this.conversationWithMessages = conversationWithMessages;
    this.conversations = conversations;
    this.createGroup = createGroup;
    this.filesBubble = filesBubble;
    this.formBubble = formBubble;
    this.groupDetails = groupDetails;
    this.groupMember = groupMember;
    this.groupWithMessages = groupWithMessages;
    this.groups = groups;
    this.imageAd = imageAd;
    this.imageAudio = imageAudio;
    this.imageAudioBubble = imageAudioBubble;
    this.imageAvatar = imageAvatar;
    this.imageBadgeCount = imageBadgeCount;
    this.imageBm = imageBm;
    this.imageBubble = imageBubble;
    this.imageC = imageC;
    this.imageCallButton = imageCallButton;
    this.imageCallLogHistory = imageCallLogHistory;
    this.imageCallLogParticipant = imageCallLogParticipant;
    this.imageCallLogRecording = imageCallLogRecording;
    this.imageCallLogs = imageCallLogs;
    this.imageCallLogsDetails = imageCallLogsDetails;
    this.imageCallLogsWithDetails = imageCallLogsWithDetails;
    this.imageCardBubble = imageCardBubble;
    this.imageCg = imageCg;
    this.imageContacts = imageContacts;
    this.imageCwm = imageCwm;
    this.imageFileBubble = imageFileBubble;
    this.imageFormBubble = imageFormBubble;
    this.imageG = imageG;
    this.imageGd = imageGd;
    this.imageGm = imageGm;
    this.imageGwm = imageGwm;
    this.imageImageBubble = imageImageBubble;
    this.imageJp = imageJp;
    this.imageListItem = imageListItem;
    this.imageMessage = imageMessage;
    this.imageMessageComposer = imageMessageComposer;
    this.imageMessageHeader = imageMessageHeader;
    this.imageMessageInformation = imageMessageInformation;
    this.imageMessageList = imageMessageList;
    this.imageMessageReceipt = imageMessageReceipt;
    this.imageMic = imageMic;
    this.imageSchedulerBubble = imageSchedulerBubble;
    this.imageStatusIndicator = imageStatusIndicator;
    this.imageTextBubble = imageTextBubble;
    this.imageTo = imageTo;
    this.imageTranslate = imageTranslate;
    this.imageU = imageU;
    this.imageUd = imageUd;
    this.imageUwm = imageUwm;
    this.imageVideoBubble = imageVideoBubble;
    this.joinProtectedGroup = joinProtectedGroup;
    this.listItem = listItem;
    this.localize = localize;
    this.mediaRecorder = mediaRecorder;
    this.messageComposer = messageComposer;
    this.messageHeader = messageHeader;
    this.messageInformation = messageInformation;
    this.messageList = messageList;
    this.messageReceipt = messageReceipt;
    this.messages = messages;
    this.moduleCalls = moduleCalls;
    this.moduleChats = moduleChats;
    this.moduleMessages = moduleMessages;
    this.moduleUsers = moduleUsers;
    this.noduleGroups = noduleGroups;
    this.parentView = parentView;
    this.schedulerBubble = schedulerBubble;
    this.shared = shared;
    this.soundManager = soundManager;
    this.statusIndicator = statusIndicator;
    this.textBubble = textBubble;
    this.theme = theme;
    this.title = title;
    this.transferOwnership = transferOwnership;
    this.userDetails = userDetails;
    this.userWithMessages = userWithMessages;
    this.users = users;
    this.videoBubble = videoBubble;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityComponentListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityComponentListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_component_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityComponentListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_member;
      LinearLayout addMember = ViewBindings.findChildViewById(rootView, id);
      if (addMember == null) {
        break missingId;
      }

      id = R.id.audio_bubble;
      LinearLayout audioBubble = ViewBindings.findChildViewById(rootView, id);
      if (audioBubble == null) {
        break missingId;
      }

      id = R.id.avatar;
      LinearLayout avatar = ViewBindings.findChildViewById(rootView, id);
      if (avatar == null) {
        break missingId;
      }

      id = R.id.backIcon;
      ImageView backIcon = ViewBindings.findChildViewById(rootView, id);
      if (backIcon == null) {
        break missingId;
      }

      id = R.id.badgeCount;
      LinearLayout badgeCount = ViewBindings.findChildViewById(rootView, id);
      if (badgeCount == null) {
        break missingId;
      }

      id = R.id.banned_members;
      LinearLayout bannedMembers = ViewBindings.findChildViewById(rootView, id);
      if (bannedMembers == null) {
        break missingId;
      }

      id = R.id.call_button;
      LinearLayout callButton = ViewBindings.findChildViewById(rootView, id);
      if (callButton == null) {
        break missingId;
      }

      id = R.id.call_log_history;
      LinearLayout callLogHistory = ViewBindings.findChildViewById(rootView, id);
      if (callLogHistory == null) {
        break missingId;
      }

      id = R.id.call_log_participants;
      LinearLayout callLogParticipants = ViewBindings.findChildViewById(rootView, id);
      if (callLogParticipants == null) {
        break missingId;
      }

      id = R.id.call_log_recording;
      LinearLayout callLogRecording = ViewBindings.findChildViewById(rootView, id);
      if (callLogRecording == null) {
        break missingId;
      }

      id = R.id.call_logs;
      LinearLayout callLogs = ViewBindings.findChildViewById(rootView, id);
      if (callLogs == null) {
        break missingId;
      }

      id = R.id.call_logs_details;
      LinearLayout callLogsDetails = ViewBindings.findChildViewById(rootView, id);
      if (callLogsDetails == null) {
        break missingId;
      }

      id = R.id.call_logs_with_details;
      LinearLayout callLogsWithDetails = ViewBindings.findChildViewById(rootView, id);
      if (callLogsWithDetails == null) {
        break missingId;
      }

      id = R.id.card_bubble;
      LinearLayout cardBubble = ViewBindings.findChildViewById(rootView, id);
      if (cardBubble == null) {
        break missingId;
      }

      id = R.id.contacts;
      LinearLayout contacts = ViewBindings.findChildViewById(rootView, id);
      if (contacts == null) {
        break missingId;
      }

      id = R.id.conversationWithMessages;
      LinearLayout conversationWithMessages = ViewBindings.findChildViewById(rootView, id);
      if (conversationWithMessages == null) {
        break missingId;
      }

      id = R.id.conversations;
      LinearLayout conversations = ViewBindings.findChildViewById(rootView, id);
      if (conversations == null) {
        break missingId;
      }

      id = R.id.create_group;
      LinearLayout createGroup = ViewBindings.findChildViewById(rootView, id);
      if (createGroup == null) {
        break missingId;
      }

      id = R.id.files_bubble;
      LinearLayout filesBubble = ViewBindings.findChildViewById(rootView, id);
      if (filesBubble == null) {
        break missingId;
      }

      id = R.id.form_bubble;
      LinearLayout formBubble = ViewBindings.findChildViewById(rootView, id);
      if (formBubble == null) {
        break missingId;
      }

      id = R.id.group_details;
      LinearLayout groupDetails = ViewBindings.findChildViewById(rootView, id);
      if (groupDetails == null) {
        break missingId;
      }

      id = R.id.group_member;
      LinearLayout groupMember = ViewBindings.findChildViewById(rootView, id);
      if (groupMember == null) {
        break missingId;
      }

      id = R.id.groupWithMessages;
      LinearLayout groupWithMessages = ViewBindings.findChildViewById(rootView, id);
      if (groupWithMessages == null) {
        break missingId;
      }

      id = R.id.groups;
      LinearLayout groups = ViewBindings.findChildViewById(rootView, id);
      if (groups == null) {
        break missingId;
      }

      id = R.id.image_ad;
      ImageView imageAd = ViewBindings.findChildViewById(rootView, id);
      if (imageAd == null) {
        break missingId;
      }

      id = R.id.image_audio;
      ImageView imageAudio = ViewBindings.findChildViewById(rootView, id);
      if (imageAudio == null) {
        break missingId;
      }

      id = R.id.image_audio_bubble;
      ImageView imageAudioBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageAudioBubble == null) {
        break missingId;
      }

      id = R.id.image_avatar;
      ImageView imageAvatar = ViewBindings.findChildViewById(rootView, id);
      if (imageAvatar == null) {
        break missingId;
      }

      id = R.id.image_badge_count;
      ImageView imageBadgeCount = ViewBindings.findChildViewById(rootView, id);
      if (imageBadgeCount == null) {
        break missingId;
      }

      id = R.id.image_bm;
      ImageView imageBm = ViewBindings.findChildViewById(rootView, id);
      if (imageBm == null) {
        break missingId;
      }

      id = R.id.image_bubble;
      LinearLayout imageBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageBubble == null) {
        break missingId;
      }

      id = R.id.image_c;
      ImageView imageC = ViewBindings.findChildViewById(rootView, id);
      if (imageC == null) {
        break missingId;
      }

      id = R.id.image_call_button;
      ImageView imageCallButton = ViewBindings.findChildViewById(rootView, id);
      if (imageCallButton == null) {
        break missingId;
      }

      id = R.id.image_call_log_history;
      ImageView imageCallLogHistory = ViewBindings.findChildViewById(rootView, id);
      if (imageCallLogHistory == null) {
        break missingId;
      }

      id = R.id.image_call_log_participant;
      ImageView imageCallLogParticipant = ViewBindings.findChildViewById(rootView, id);
      if (imageCallLogParticipant == null) {
        break missingId;
      }

      id = R.id.image_call_log_recording;
      ImageView imageCallLogRecording = ViewBindings.findChildViewById(rootView, id);
      if (imageCallLogRecording == null) {
        break missingId;
      }

      id = R.id.image_call_logs;
      ImageView imageCallLogs = ViewBindings.findChildViewById(rootView, id);
      if (imageCallLogs == null) {
        break missingId;
      }

      id = R.id.image_call_logs_details;
      ImageView imageCallLogsDetails = ViewBindings.findChildViewById(rootView, id);
      if (imageCallLogsDetails == null) {
        break missingId;
      }

      id = R.id.image_call_logs_with_details;
      ImageView imageCallLogsWithDetails = ViewBindings.findChildViewById(rootView, id);
      if (imageCallLogsWithDetails == null) {
        break missingId;
      }

      id = R.id.image_card_bubble;
      ImageView imageCardBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageCardBubble == null) {
        break missingId;
      }

      id = R.id.image_cg;
      ImageView imageCg = ViewBindings.findChildViewById(rootView, id);
      if (imageCg == null) {
        break missingId;
      }

      id = R.id.image_contacts;
      ImageView imageContacts = ViewBindings.findChildViewById(rootView, id);
      if (imageContacts == null) {
        break missingId;
      }

      id = R.id.image_cwm;
      ImageView imageCwm = ViewBindings.findChildViewById(rootView, id);
      if (imageCwm == null) {
        break missingId;
      }

      id = R.id.image_file_bubble;
      ImageView imageFileBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageFileBubble == null) {
        break missingId;
      }

      id = R.id.image_form_bubble;
      ImageView imageFormBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageFormBubble == null) {
        break missingId;
      }

      id = R.id.image_g;
      ImageView imageG = ViewBindings.findChildViewById(rootView, id);
      if (imageG == null) {
        break missingId;
      }

      id = R.id.image_gd;
      ImageView imageGd = ViewBindings.findChildViewById(rootView, id);
      if (imageGd == null) {
        break missingId;
      }

      id = R.id.image_gm;
      ImageView imageGm = ViewBindings.findChildViewById(rootView, id);
      if (imageGm == null) {
        break missingId;
      }

      id = R.id.image_gwm;
      ImageView imageGwm = ViewBindings.findChildViewById(rootView, id);
      if (imageGwm == null) {
        break missingId;
      }

      id = R.id.image_image_bubble;
      ImageView imageImageBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageImageBubble == null) {
        break missingId;
      }

      id = R.id.image_jp;
      ImageView imageJp = ViewBindings.findChildViewById(rootView, id);
      if (imageJp == null) {
        break missingId;
      }

      id = R.id.image_list_item;
      ImageView imageListItem = ViewBindings.findChildViewById(rootView, id);
      if (imageListItem == null) {
        break missingId;
      }

      id = R.id.image_message;
      ImageView imageMessage = ViewBindings.findChildViewById(rootView, id);
      if (imageMessage == null) {
        break missingId;
      }

      id = R.id.image_message_composer;
      ImageView imageMessageComposer = ViewBindings.findChildViewById(rootView, id);
      if (imageMessageComposer == null) {
        break missingId;
      }

      id = R.id.image_message_header;
      ImageView imageMessageHeader = ViewBindings.findChildViewById(rootView, id);
      if (imageMessageHeader == null) {
        break missingId;
      }

      id = R.id.image_message_information;
      ImageView imageMessageInformation = ViewBindings.findChildViewById(rootView, id);
      if (imageMessageInformation == null) {
        break missingId;
      }

      id = R.id.image_message_list;
      ImageView imageMessageList = ViewBindings.findChildViewById(rootView, id);
      if (imageMessageList == null) {
        break missingId;
      }

      id = R.id.image_message_receipt;
      ImageView imageMessageReceipt = ViewBindings.findChildViewById(rootView, id);
      if (imageMessageReceipt == null) {
        break missingId;
      }

      id = R.id.image_mic;
      ImageView imageMic = ViewBindings.findChildViewById(rootView, id);
      if (imageMic == null) {
        break missingId;
      }

      id = R.id.image_scheduler_bubble;
      ImageView imageSchedulerBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageSchedulerBubble == null) {
        break missingId;
      }

      id = R.id.image_status_indicator;
      ImageView imageStatusIndicator = ViewBindings.findChildViewById(rootView, id);
      if (imageStatusIndicator == null) {
        break missingId;
      }

      id = R.id.image_text_bubble;
      ImageView imageTextBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageTextBubble == null) {
        break missingId;
      }

      id = R.id.image_to;
      ImageView imageTo = ViewBindings.findChildViewById(rootView, id);
      if (imageTo == null) {
        break missingId;
      }

      id = R.id.image_translate;
      ImageView imageTranslate = ViewBindings.findChildViewById(rootView, id);
      if (imageTranslate == null) {
        break missingId;
      }

      id = R.id.image_u;
      ImageView imageU = ViewBindings.findChildViewById(rootView, id);
      if (imageU == null) {
        break missingId;
      }

      id = R.id.image_ud;
      ImageView imageUd = ViewBindings.findChildViewById(rootView, id);
      if (imageUd == null) {
        break missingId;
      }

      id = R.id.image_uwm;
      ImageView imageUwm = ViewBindings.findChildViewById(rootView, id);
      if (imageUwm == null) {
        break missingId;
      }

      id = R.id.image_video_bubble;
      ImageView imageVideoBubble = ViewBindings.findChildViewById(rootView, id);
      if (imageVideoBubble == null) {
        break missingId;
      }

      id = R.id.join_protected_group;
      LinearLayout joinProtectedGroup = ViewBindings.findChildViewById(rootView, id);
      if (joinProtectedGroup == null) {
        break missingId;
      }

      id = R.id.list_item;
      LinearLayout listItem = ViewBindings.findChildViewById(rootView, id);
      if (listItem == null) {
        break missingId;
      }

      id = R.id.localize;
      LinearLayout localize = ViewBindings.findChildViewById(rootView, id);
      if (localize == null) {
        break missingId;
      }

      id = R.id.media_recorder;
      LinearLayout mediaRecorder = ViewBindings.findChildViewById(rootView, id);
      if (mediaRecorder == null) {
        break missingId;
      }

      id = R.id.messageComposer;
      LinearLayout messageComposer = ViewBindings.findChildViewById(rootView, id);
      if (messageComposer == null) {
        break missingId;
      }

      id = R.id.messageHeader;
      LinearLayout messageHeader = ViewBindings.findChildViewById(rootView, id);
      if (messageHeader == null) {
        break missingId;
      }

      id = R.id.messageInformation;
      LinearLayout messageInformation = ViewBindings.findChildViewById(rootView, id);
      if (messageInformation == null) {
        break missingId;
      }

      id = R.id.messageList;
      LinearLayout messageList = ViewBindings.findChildViewById(rootView, id);
      if (messageList == null) {
        break missingId;
      }

      id = R.id.messageReceipt;
      LinearLayout messageReceipt = ViewBindings.findChildViewById(rootView, id);
      if (messageReceipt == null) {
        break missingId;
      }

      id = R.id.messages;
      LinearLayout messages = ViewBindings.findChildViewById(rootView, id);
      if (messages == null) {
        break missingId;
      }

      id = R.id.module_calls;
      LinearLayout moduleCalls = ViewBindings.findChildViewById(rootView, id);
      if (moduleCalls == null) {
        break missingId;
      }

      id = R.id.moduleChats;
      LinearLayout moduleChats = ViewBindings.findChildViewById(rootView, id);
      if (moduleChats == null) {
        break missingId;
      }

      id = R.id.moduleMessages;
      LinearLayout moduleMessages = ViewBindings.findChildViewById(rootView, id);
      if (moduleMessages == null) {
        break missingId;
      }

      id = R.id.moduleUsers;
      LinearLayout moduleUsers = ViewBindings.findChildViewById(rootView, id);
      if (moduleUsers == null) {
        break missingId;
      }

      id = R.id.noduleGroups;
      LinearLayout noduleGroups = ViewBindings.findChildViewById(rootView, id);
      if (noduleGroups == null) {
        break missingId;
      }

      LinearLayout parentView = (LinearLayout) rootView;

      id = R.id.scheduler_bubble;
      LinearLayout schedulerBubble = ViewBindings.findChildViewById(rootView, id);
      if (schedulerBubble == null) {
        break missingId;
      }

      id = R.id.shared;
      LinearLayout shared = ViewBindings.findChildViewById(rootView, id);
      if (shared == null) {
        break missingId;
      }

      id = R.id.soundManager;
      LinearLayout soundManager = ViewBindings.findChildViewById(rootView, id);
      if (soundManager == null) {
        break missingId;
      }

      id = R.id.statusIndicator;
      LinearLayout statusIndicator = ViewBindings.findChildViewById(rootView, id);
      if (statusIndicator == null) {
        break missingId;
      }

      id = R.id.text_bubble;
      LinearLayout textBubble = ViewBindings.findChildViewById(rootView, id);
      if (textBubble == null) {
        break missingId;
      }

      id = R.id.theme;
      LinearLayout theme = ViewBindings.findChildViewById(rootView, id);
      if (theme == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.transfer_ownership;
      LinearLayout transferOwnership = ViewBindings.findChildViewById(rootView, id);
      if (transferOwnership == null) {
        break missingId;
      }

      id = R.id.user_details;
      LinearLayout userDetails = ViewBindings.findChildViewById(rootView, id);
      if (userDetails == null) {
        break missingId;
      }

      id = R.id.userWithMessages;
      LinearLayout userWithMessages = ViewBindings.findChildViewById(rootView, id);
      if (userWithMessages == null) {
        break missingId;
      }

      id = R.id.users;
      LinearLayout users = ViewBindings.findChildViewById(rootView, id);
      if (users == null) {
        break missingId;
      }

      id = R.id.video_bubble;
      LinearLayout videoBubble = ViewBindings.findChildViewById(rootView, id);
      if (videoBubble == null) {
        break missingId;
      }

      return new ActivityComponentListBinding((LinearLayout) rootView, addMember, audioBubble,
          avatar, backIcon, badgeCount, bannedMembers, callButton, callLogHistory,
          callLogParticipants, callLogRecording, callLogs, callLogsDetails, callLogsWithDetails,
          cardBubble, contacts, conversationWithMessages, conversations, createGroup, filesBubble,
          formBubble, groupDetails, groupMember, groupWithMessages, groups, imageAd, imageAudio,
          imageAudioBubble, imageAvatar, imageBadgeCount, imageBm, imageBubble, imageC,
          imageCallButton, imageCallLogHistory, imageCallLogParticipant, imageCallLogRecording,
          imageCallLogs, imageCallLogsDetails, imageCallLogsWithDetails, imageCardBubble, imageCg,
          imageContacts, imageCwm, imageFileBubble, imageFormBubble, imageG, imageGd, imageGm,
          imageGwm, imageImageBubble, imageJp, imageListItem, imageMessage, imageMessageComposer,
          imageMessageHeader, imageMessageInformation, imageMessageList, imageMessageReceipt,
          imageMic, imageSchedulerBubble, imageStatusIndicator, imageTextBubble, imageTo,
          imageTranslate, imageU, imageUd, imageUwm, imageVideoBubble, joinProtectedGroup, listItem,
          localize, mediaRecorder, messageComposer, messageHeader, messageInformation, messageList,
          messageReceipt, messages, moduleCalls, moduleChats, moduleMessages, moduleUsers,
          noduleGroups, parentView, schedulerBubble, shared, soundManager, statusIndicator,
          textBubble, theme, title, transferOwnership, userDetails, userWithMessages, users,
          videoBubble);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
